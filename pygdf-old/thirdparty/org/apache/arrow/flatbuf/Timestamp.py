# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers

# /// Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, UTC.
class Timestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTimestamp(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Timestamp()
        x.Init(buf, n + offset)
        return x

    # Timestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Timestamp
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

# /// The time zone is a string indicating the name of a time zone, one of:
# ///
# /// * As used in the Olson time zone database (the "tz database" or
# ///   "tzdata"), such as "America/New_York"
# /// * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30
# ///
# /// Whether a timezone string is present indicates different semantics about
# /// the data:
# ///
# /// * If the time zone is null or equal to an empty string, the data is "time
# ///   zone naive" and shall be displayed *as is* to the user, not localized
# ///   to the locale of the user. This data can be though of as UTC but
# ///   without having "UTC" as the time zone, it is not considered to be
# ///   localized to any time zone
# ///
# /// * If the time zone is set to a valid value, values can be displayed as
# ///   "localized" to that time zone, even though the underlying 64-bit
# ///   integers are identical to the same data stored in UTC. Converting
# ///   between time zones is a metadata-only operation and does not change the
# ///   underlying values
    # Timestamp
    def Timezone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def TimestampStart(builder): builder.StartObject(2)
def TimestampAddUnit(builder, unit): builder.PrependInt16Slot(0, unit, 0)
def TimestampAddTimezone(builder, timezone): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)
def TimestampEnd(builder): return builder.EndObject()
