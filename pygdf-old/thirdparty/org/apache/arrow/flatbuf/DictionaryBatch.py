# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers

# /// ----------------------------------------------------------------------
# /// For sending dictionary encoding information. Any Field can be
# /// dictionary-encoded, but in this case none of its children may be
# /// dictionary-encoded.
# /// There is one vector / column per dictionary
# ///
class DictionaryBatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDictionaryBatch(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DictionaryBatch()
        x.Init(buf, n + offset)
        return x

    # DictionaryBatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DictionaryBatch
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DictionaryBatch
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .RecordBatch import RecordBatch
            obj = RecordBatch()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DictionaryBatchStart(builder): builder.StartObject(2)
def DictionaryBatchAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def DictionaryBatchAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def DictionaryBatchEnd(builder): return builder.EndObject()
