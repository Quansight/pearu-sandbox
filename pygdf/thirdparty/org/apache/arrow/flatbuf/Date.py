# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers

# /// Date is either a 32-bit or 64-bit type representing elapsed time since UNIX
# /// epoch (1970-01-01), stored in either of two units:
# ///
# /// * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
# ///   leap seconds), where the values are evenly divisible by 86400000
# /// * Days (32 bits) since the UNIX epoch
class Date(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDate(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Date()
        x.Init(buf, n + offset)
        return x

    # Date
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Date
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def DateStart(builder): builder.StartObject(1)
def DateAddUnit(builder, unit): builder.PrependInt16Slot(0, unit, 0)
def DateEnd(builder): return builder.EndObject()
