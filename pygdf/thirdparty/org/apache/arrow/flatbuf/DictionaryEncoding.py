# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers

# /// ----------------------------------------------------------------------
# /// Dictionary encoding metadata
class DictionaryEncoding(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDictionaryEncoding(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DictionaryEncoding()
        x.Init(buf, n + offset)
        return x

    # DictionaryEncoding
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// The known dictionary id in the application where this data is used. In
# /// the file or streaming formats, the dictionary ids are found in the
# /// DictionaryBatch messages
    # DictionaryEncoding
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

# /// The dictionary indices are constrained to be positive integers. If this
# /// field is null, the indices must be signed int32
    # DictionaryEncoding
    def IndexType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Int import Int
            obj = Int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// By default, dictionaries are not ordered, or the order does not have
# /// semantic meaning. In some statistical, applications, dictionary-encoding
# /// is used to represent ordered categorical data, and we provide a way to
# /// preserve that metadata here
    # DictionaryEncoding
    def IsOrdered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def DictionaryEncodingStart(builder): builder.StartObject(3)
def DictionaryEncodingAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def DictionaryEncodingAddIndexType(builder, indexType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(indexType), 0)
def DictionaryEncodingAddIsOrdered(builder, isOrdered): builder.PrependBoolSlot(2, isOrdered, 0)
def DictionaryEncodingEnd(builder): return builder.EndObject()
